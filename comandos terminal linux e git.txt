COMANDOS TERMINAL LINUX

• pwd -> mostra a pasta que vc está
• sudo apt-get install git -> instala o git (exemplo)


--------------------------------------------------------
NOTAS SOBRE GIT:

O Git vem com uma ferramenta chamada git config que permite ver e atribuir variáveis de configuração que controlam todos os aspectos de como o Git funciona. Estas variáveis podem ser armazenadas em três lugares diferentes:

    • /etc/config: Configurações pertinentes a todos os usuários do sistema.
    • ~/.gitconfig: Configuração específica de cada usuário.
    • .git/config: Configuração de cada diretório git.

--------------------------------------------------------
COMANDOS GIT:

• git config -–global user.name “fulano”
	(configura nome de usuário do git)

• git config –-global user.email fulano@desenvolvedortop.com
	(configura e-mail de usuário do git)

• git config -–list
	(lista todas as configurações do Git)

PS: A diretiva –global é responsável por registrar as informações no ~/.gitconfig. Se você desejar que essas informações sejam diferentes para projetos específicos, é necessário apenas digitar o mesmo comando sem a diretiva –global no diretório em que foi criado um projeto .Git.

• git clone url
	(serve para obter-se a cópia de um repositório git existente)

• git init 
	(cria uma pasta pra os diretórios git)

• git status 
	(diz qual o status dos arquivos da pasta em que vc está)

• git add nome_do_arquivo.extensão
	(comitta o arquivo especificado, deixando-o pronto para ser enviado para o repositório)

• git add .
	(comitta todos os arquivos da pasta, deixando-os prontos para serem enviados para o repositório) 

• git commit -m "mensagem"
	(adiciona uma mensagem no commit)

• git push origin master
	(envia o commit pra o repositório remoto do github)

• clear 
	(deixa a visualização no terminal limpa)

• git diff 
	(mostra se/quais arquivos, que já estavam comittados, tiveram alguma alteração após o commit e qual foi a alteração)

• git log
	(serve para ver o histórico de commits)

• cd ..
	(volta uma pasta)

• cd nome_da_pasta/
	(entra na pasta com o caminho especificado)

• mkdir nome_da_pasta
	(cria uma pasta com o nome especificado)

• touch nome_do_arquivo.extensão
	(cria um arquivo com o nome e extensão especificados)

• touch .gitignore
	(cria um arquivo no formato .txt em que você pode listar os arquivos que você que sejam ignorados do commit)

• git tag -a v1.1 
	(cria uma tag com o nome v1.1 | tags tem a função de marcar a versão de um conjunto de commits)

• git tag -a v1.1 -m "mensagem"
	(cria uma tag com o nome v1.1 e uma mensagem | tags tem a função de marcar a versão de um conjunto de commits)

• git push origin master --tags
	(sobe as tags criadas para o github)

• git push
	(sobe os arquivos commitados para o repositório já criado no GitHub)

• git pull origin master 
	("puxa" os arquivos do repositório remoto no github para o seu repositório local na máquina)

• git remote add origin https://meu-endereco.com/meu-projeto.git
	(liga um repositório local a um repositório remoto já existente e especificado no parâmetro do código)

• git remote -v
	(mostra o endereço do repositório remoto para o qual o commit será enviado)

• git remote rm origin
	(desfaz a conexão criada com o repositório remoto)

• git remote rename nome-atual novo-nome
	(troca o nome de um repositório remoto)

• git remote set-url origin http://meu-novo-endereco/meu-projeto.git
	(define a url do repositório para onde os commits passarão a ser enviados)

• git push -u origin minha-branch
	(envia os commits para uma branch remota ainda não existente no repositório. após a branch ser criada pode-se enviar os arquivos apenas com um git push)

• git branch
	(lista as branches presentes no repositório do seu computador)

• git branch -a
	(lista as branches presentes no repositório do computador e no repositório remoto)

• git branch nome-da-branch
	(cria uma branch com o nome especificado)

• git checkout nome-da-branch
	(você passa a trabalhar dentro da branch nome-da-branch)

• git -b nome-da-branch
	(uma espécie de atalho, que cria uma nova branch e já te tranfere para essa branch)

• git merge nome-da-branch
	(une a branch que você está com a branch nome-da-branch. depois desse comando aparecerá uma mensagem pedindo pra vc escrever uma mensagem explicando o porquê da união dessas branches. você pode escrever essa mensagem ou simplesmente digitar ":x")

• git rebase nome-da-branch
	(une duas branches sem perder os logs. imagine a seguinte situação: você quer desenvolver uma parte específica do código de um arquivo, e, para organizar o fluxo de trabalho em equipe, você cria uma branch partindo dessa branch mãe chamada "master" e essa branch que você criou se chama "section". E aí depois de você já ter começado a desenvolver a sua parte do código e ter feito vários commits alguém faz uma correção no código da branch master. Se você der um "git merge master", os logs, ou seja, as informações dos commits já realizados por você vão ser perdidas, e você quer pegar essa correção feita na branch master e trazer pra sua branch também. Para essa situação, você pode fazer um "git checkout master", pra ir até a master e depois fazer um "git rebase section". Dessa forma você vai levar as alterações da branch master até a branch section sem dar um merge, ou seja, sem perder o seus logs e continuar o seu projeto)

• git push --set-upstream origin nome-da-branch 

• git log 
	(mostra informações de um commit, como o seu código hash, por exemplo)

• git log --oneline 
	(mostra as informações do commit de forma resumida, com só o início do hash, por exemplo)

• git log -p
	(mostra todas as alterações que foram feitas no commit)

• git revert 00000000000000
	(volta para a versão/commit do código especificado)

• git checkout -- nome_do_arquivo.extensão
	(te tranfere pra o estado do último commit que você nesse arquivo)

• git reset HEAD nome-do-arquivo.extensão
	(desfaz o último git add que você deu)

• git revert hash-do-commit
	(depois de você ter feito um ou mais commits e perceber que eles não deveriam ter sido feitos e que você precisa voltar para o estado de um commit anterior você pode usar esse comando. Pra descobrir qual o hash do commit que você quer ir, você pode dar um git log. É possível ainda fazer um commit só para esse ato de voltar para um outro commit e pra isso aparecerá uma opção na tela)

• git stash
	(é uma espécie de commit temporário. serve pra quando você vai precisar parar de trabalhar em código, sabe que ainda precisa revisá-lo antes de fazer um commit, mas precisa deixá-lo salvo para fazer essa conferência depois)

• git stash list
	(mostra a lista de stash's criados, com número de cada stash)

• git stash apply n
	(aplica as modificações da stash de número n)

• git stash drop

• git stash pop

• git diff hash1..hash5
	(no exemplo, mostra a diferença entre o estado do commit de hash1 e o commit de hash5)

• git diff
	(se você tiver feito alterações que ainda não foram commitadas, esse comando irá mostrar quais são essas alterações que ainda não foram commitadas)

• 

-------------------------------------

DICAS:

• Gitignore:

- Para nunca incluir arquivos específicos nos commits, é interessante criar um arquivo chamado ".gitignore", que nada mais será do que um arquivo de texto no qual você pode escrever os nomes dos arquivos que você quer que fiquem sendo ignorados nos commits;
- Para usar o .gitignore, depois de criar o arquivo para escrever os nomes dos arquivos a serem ignorados dentro dele, cada um em uma linha, você deve dar um git add .gitignore e, então, fazer um commit. Só aí o .gitignore começa a funcionar de fato.




-------------------------------------

LINKS:

• Geralzão de Git:
	https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Gravando-Altera%C3%A7%C3%B5es-em-Seu-Reposit%C3%B3rio

• Vários tipos de git log:
	https://devhints.io/git-logs

	